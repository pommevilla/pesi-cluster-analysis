import click
import subprocess

# Notes
## Subcommands

# pesi_screen
# pesi_extract
# pesi_ordinate

SNAKEMAKE_ARGS = ["snakemake", "--use-conda", "-c 2"]


def run_snakemake_command(snakemake_path: str):
    """Runs the snakemake workflow"""

    subprocess.run(["snakemake", "--use-conda" f"--snakemake {snakemake_path}"])


####### CLI stuff

## Global options for all subcommands
## See: https://github.com/pallets/click/issues/108#issuecomment-194465429
_global_test_options = [
    click.option(
        "--dry-run",
        "-n",
        is_flag=True,
        default=False,
        help="Perform a dry run of the associated snakemake workflow",
    )
]


def global_options(func):
    for option in reversed(_global_test_options):
        func = option(func)
    return func


@click.command(epilog="This is kind of cool")
@click.option("--count", default=1, help="number of greetings")
@click.argument("name")
def cli(count: int, name: str):
    for _ in range(count):
        click.echo(f", {name}!")


@click.group
@click.pass_context
def pesica(ctx: dict):
    # if dry_run:
    #     print("Dry run enabled")
    # else:
    #     print("Dry run disabled")

    ctx.ensure_object(dict)

    # ctx.obj["DRY_RUN"] = dry_run


@pesica.command()
def tester():
    """Test that snakemake works correctly from here"""
    print("Running tester....")
    subprocess.run(["snakemake", "--use-conda", "-c 2"])


@pesica.command()
@global_options
@click.pass_context
def screen(ctx):
    """Screens pESI"""
    print("Screening input files for pESI")

    print(f"Value of dry_run is: {ctx.obj['DRY_RUN']}")

    subprocess.run(
        [
            "snakemake",
            # "--use-conda",
            # "-c all",
            "-np",
            "--snakefile workflow/rules/pesi_screen_TEST.smk",
        ]
    )


@pesica.command()
@global_options
@click.pass_context
def extract(ctx: dict, dry_run: bool):
    """Extracts pESI"""
    # subprocess.run(["snakemake", "--help"])

    if dry_run:
        print("Dry run enabled")
        subprocess.run(
            ["snakemake", "-n", "--snakefile", "workflow/rules/pesi_extract.smk"]
        )
    else:
        print("Dry run disabled")
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "--use-conda",
                "--snakefile",
                "workflow/rules/pesi_extract.smk",
            ],
        )


@pesica.command()
def ordinate():
    """Ordinates pESI"""
    pass


if __name__ == "__main__":
    pesica(obj={})
