###################
# CLI for the pesica workflow
# Author: Paul Villanueva
###################
import click
import subprocess

####### Helper functions


# TODO
def run_snakemake_command(snakemake_rule_path: str, **kwargs):
    """Runs the snakemake workflow"""

    subprocess.run(["snakemake", "--use-conda" f"--snakemake {snakemake_rule_path}"])


####### CLI stuff

## Global options for all subcommands
## See: https://github.com/pallets/click/issues/108#issuecomment-194465429
_global_test_options = [
    click.option(
        "--dry-run",
        "-n",
        is_flag=True,
        default=False,
        help="Perform a dry run of the associated snakemake workflow",
    )
]


# Decorator to add global functions to subcommands
def global_options(func):
    for option in reversed(_global_test_options):
        func = option(func)
    return func


CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.group(context_settings=CONTEXT_SETTINGS)
@click.pass_context
def pesica(ctx: dict):
    ctx.ensure_object(dict)


####### Subcommands


#### Diagnostics
# Run diagnostic programs on the input genomes
@pesica.command()
@global_options
@click.pass_context
def diagnostics(ctx, dry_run: bool):
    """Runs diagnostics for input genomes"""
    print(">>>> Not yet implemented <<<<")
    ctx.exit(1)


#### Setup
# Setup virtual environments, decompress the blast DB, download bakta databases
@pesica.command()
@global_options
@click.pass_context
def setup(ctx: dict, dry_run: bool):
    """Setups the pesica pipeline"""
    print(">>>> Not yet implemented <<<<")
    ctx.exit(1)

    # print("Performing setup steps.")

    # if dry_run:
    #     print("Performing dry run...")
    #     subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/setup.smk"])
    #     ctx.exit(0)

    # # Decompresses the blast DB
    # subprocess.run(
    #     [
    #         "snakemake",
    #         "-c",
    #         "all",
    #         "-j",
    #         "unlimited",
    #         "--use-conda",
    #         "--snakefile",
    #         "workflow/rules/setup.smk",
    #     ],
    # )

    # # Sets up all the required conda environments
    # all_snakemake_rules = ["screen", "extract", "ordinate"]

    # processes = set()

    # for rule in all_snakemake_rules:
    #     p = subprocess.Popen(
    #         [
    #             "snakemake",
    #             "-c",
    #             "all",
    #             "--use-conda",
    #             "--create-envs-only",
    #             "--snakefile",
    #             f"workflow/rules/{rule}.smk",
    #         ],
    #         stdout=subprocess.PIPE,
    #         stderr=subprocess.PIPE,
    #     )
    #     processes.add(p)


#### Screen
# Determine the presence/absence of pESI in the input genomes
@pesica.command()
@global_options
@click.pass_context
def screen(ctx: dict, dry_run: bool):
    """Screens pESI"""

    print("Screening input genomes for pESI presence...")

    if dry_run:
        print("Performing dry run...")
        subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/screen.smk"])
    else:
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "-j",
                "unlimited",
                "--use-conda",
                "--snakefile",
                "workflow/rules/screen.smk",
            ],
        )


#### Extract
# Extract pESI-like contigs from input genomes
@pesica.command()
@global_options
@click.pass_context
def extract(ctx: dict, dry_run: bool):
    """Extracts pESI"""

    print("Extracting pESI contigs from input genomes where pESI was detected...")

    if dry_run:
        print("Performing dry run...")
        subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/extract.smk"])
    else:
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "-j",
                "unlimited",
                "--use-conda",
                "--snakefile",
                "workflow/rules/extract.smk",
            ],
        )


if __name__ == "__main__":
    pesica(obj={})
