import click
import subprocess


def run_snakemake_command(snakemake_path: str, **kwargs):
    """Runs the snakemake workflow"""

    subprocess.run(["snakemake", "--use-conda" f"--snakemake {snakemake_path}"])


####### CLI stuff

## Global options for all subcommands
## See: https://github.com/pallets/click/issues/108#issuecomment-194465429
_global_test_options = [
    click.option(
        "--dry-run",
        "-n",
        is_flag=True,
        default=False,
        help="Perform a dry run of the associated snakemake workflow",
    )
]


# Decorator to add global functions to subcommands
def global_options(func):
    for option in reversed(_global_test_options):
        func = option(func)
    return func


CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.group(context_settings=CONTEXT_SETTINGS)
@click.pass_context
def pesica(ctx: dict):
    # if dry_run:
    #     print("Dry run enabled")
    # else:
    #     print("Dry run disabled")

    ctx.ensure_object(dict)

    # ctx.obj["DRY_RUN"] = dry_run


####### Subcommands
@pesica.command()
@global_options
@click.pass_context
def diagnostics(ctx, dry_run: bool):
    """Runs diagnostics for input genomes"""
    print("Running diagnostics for input genomes")

    print(f"Value of dry_run is: {ctx.obj['DRY_RUN']}")

    if dry_run:
        print("Dry run enabled")
        subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/extract.smk"])
    else:
        print("Dry run disabled")
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "--use-conda",
                "--snakefile",
                "workflow/rules/extract.smk",
            ],
        )


@pesica.command()
@global_options
@click.pass_context
def screen(ctx: dict, dry_run: bool):
    """Screens pESI"""

    print("Screening input genomes for pESI presence...")

    if dry_run:
        print("Performing dry run...")
        subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/screen.smk"])
    else:
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "-j",
                "unlimited",
                "--use-conda",
                "--snakefile",
                "workflow/rules/screen.smk",
            ],
        )


@pesica.command()
@global_options
@click.pass_context
def extract(ctx: dict, dry_run: bool):
    """Extracts pESI"""

    print("Extracting pESI contigs from input genomes where pESI was detected...")

    if dry_run:
        print("Performing dry run...")
        subprocess.run(["snakemake", "-n", "--snakefile", "workflow/rules/extract.smk"])
    else:
        subprocess.run(
            [
                "snakemake",
                "-c",
                "all",
                "-j",
                "unlimited",
                "--use-conda",
                "--snakefile",
                "workflow/rules/extract.smk",
            ],
        )


@pesica.command()
def ordinate():
    """Ordinates pESI"""
    pass


if __name__ == "__main__":
    pesica(obj={})
